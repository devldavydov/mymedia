package cmdproc

// Code generated by "go generate". DO NOT EDIT!

import (
	"fmt"
	"time"
	"strconv"
	"strings"	

	m "github.com/devldavydov/mymedia/internal/common/messages"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v4"
)	

func (r *CmdProcessor) process(c tele.Context, cmd string, userID int64) error {
	cmdParts := []string{}
	for _, part := range strings.Split(cmd, ",") {
		cmdParts = append(cmdParts, strings.Trim(part, " "))
	}

	if len(cmdParts) == 0 {
		r.logger.Error(
			"invalid command",
			zap.String("command", cmd),
			zap.Int64("userID", userID),
		)
		return c.Send(m.MsgErrInvalidCommand)
	}

	var resp []CmdResponse

	switch cmdParts[0] {
	case "f":
		resp = r.process_f("f", cmdParts[1:], userID)
	case "h":
		resp = r.processHelp()
	default:
		r.logger.Error(
			"unknown command",
			zap.String("command", cmd),
			zap.Int64("userID", userID),
		)
		resp = NewSingleCmdResponse(m.MsgErrInvalidCommand)
	}	

	if r.debugMode {
		if err := c.Send("!!! ОТЛАДОЧНЫЙ РЕЖИМ !!!"); err != nil {
			return err
		}
	}

	for _, rItem := range resp {
		if err := c.Send(rItem.what, rItem.opts...); err != nil {
			return err
		}
	}

	return nil	
}

func (r *CmdProcessor) process_f(baseCmd string, cmdParts []string, userID int64) []CmdResponse {
	if len(cmdParts) == 0 {
		r.logger.Error(
			"invalid command",
			zap.Strings("cmdParts", cmdParts),
			zap.Int64("userID", userID),
		)
		return NewSingleCmdResponse(m.MsgErrInvalidCommand)
	}

	var resp []CmdResponse

	switch cmdParts[0] {
	case "ls":
		resp = r.fileListCommand(userID)
				
	case "rm":
		if len(cmdParts[1:]) != 1 {
			return NewSingleCmdResponse(m.MsgErrInvalidArgsCount)
		}
		
		cmdParts = cmdParts[1:]
		
		val0, err := parseStringGE0(cmdParts[0])
		if err != nil {
			return argError("Паттерн")
		}
		
		resp = r.fileRmCommand(
			userID,
			val0,
			)
				
	case "dl":
		if len(cmdParts[1:]) != 1 {
			return NewSingleCmdResponse(m.MsgErrInvalidArgsCount)
		}
		
		cmdParts = cmdParts[1:]
		
		val0, err := parseStringGE0(cmdParts[0])
		if err != nil {
			return argError("Паттерн")
		}
		
		resp = r.fileDownloadCommand(
			userID,
			val0,
			)
				
	case "h":
		return NewSingleCmdResponse(
			newCmdHelpBuilder(baseCmd, "Управление файлами").
			addCmd(
				"Список",
				"ls",
				).
			addCmd(
				"Удалить",
				"rm",
				"Паттерн [Строка>=0]",
				).
			addCmd(
				"Скачать",
				"dl",
				"Паттерн [Строка>=0]",
				).
			build(),
		optsHTML)

	default:
		r.logger.Error(
			"invalid command",
			zap.Strings("cmdParts", cmdParts),
			zap.Int64("userID", userID),
		)
		resp = NewSingleCmdResponse(m.MsgErrInvalidCommand)
	}

	return resp
}

func (r *CmdProcessor) processHelp() []CmdResponse {
	var sb strings.Builder
	sb.WriteString("<b>Команды помощи по разделам:</b>\n")
	sb.WriteString("<b>\u2022 f,h</b> - Файлы\n")
	sb.WriteString("\n<b>Типы данных:</b>\n")
	sb.WriteString("<b>\u2022 Строка>=0</b> - Строка длиной >=0\n")
	return NewSingleCmdResponse(sb.String(), optsHTML)
}

func parseTimestamp(tz *time.Location, arg string) (time.Time, error) {
	var t time.Time

	// Arg empty string - now
	// Arg integer - add delta to now
	// Arg in date format

	if arg == "" {
		t = time.Now().In(tz)
	} else {
        delta, err := strconv.Atoi(arg)

		if err == nil {
			t = time.Now().In(tz)
			t = t.Add(time.Duration(delta) * 24 * time.Hour)
		} else {
			t, err = time.Parse("02.01.2006", arg)
			if err != nil {
				return time.Time{}, err
			}
		}
	}

	return time.Date(t.Year(), t.Month(), t.Day(), 0, 0, 0, 0, tz), nil
}

func parseFloatG0(arg string) (float64, error) {
	val, err := strconv.ParseFloat(arg, 64)
	if err != nil {
		return 0, err
	}

	if val <= 0 {
		return 0, fmt.Errorf("not above zero")
	}

	return val, nil
}

func parseFloatGE0(arg string) (float64, error) {
	val, err := strconv.ParseFloat(arg, 64)
	if err != nil {
		return 0, err
	}

	if val < 0 {
		return 0, fmt.Errorf("not above or equal zero")
	}

	return val, nil
}

func parseStringG0(arg string) (string, error) {
	if len(arg) == 0 {
		return "", fmt.Errorf("empty string")
	}
	
	return arg, nil
}

func parseStringGE0(arg string) (string, error) {
	return arg, nil
}

func parseStringArr(arg string) ([]string, error) {
	parts := []string{}
	for _, part := range strings.Split(arg, "/") {
		parts = append(parts, strings.Trim(part, " "))
	}

	if len(parts) == 0 {
		return nil, fmt.Errorf("empty array")
	}

	return parts, nil
}

func parseFloatArr(arg string) ([]float64, error) {
	parts := []float64{}
	for _, part := range strings.Split(arg, "/") {
		part = strings.Trim(part, " ")
		val, err := strconv.ParseFloat(part, 64)
		if err != nil {
			return nil, err
		}

		parts = append(parts, val)
	}

	if len(parts) == 0 {
		return nil, fmt.Errorf("empty array")
	}

	return parts, nil
}

func argError(argName string) []CmdResponse {
	return NewSingleCmdResponse(fmt.Sprintf("%s: %s", m.MsgErrInvalidArg, argName))
}

func formatTimestamp(ts time.Time) string {
	return ts.Format("02.01.2006")
}

type cmdHelpItem struct {
	label   string
	cmd     string
	comment string
	args    []string
}

type cmdHelpBuilder struct {
	baseCmd string
	label   string
	items   []cmdHelpItem
}

func newCmdHelpBuilder(baseCmd, label string) *cmdHelpBuilder {
	return &cmdHelpBuilder{baseCmd: baseCmd, label: label}
}

func (r *cmdHelpBuilder) addCmd(label, cmd string, args ...string) *cmdHelpBuilder {
	r.items = append(r.items, cmdHelpItem{
		label: label,
		cmd:   cmd,
		args:  args,
	})
	return r
}

func (r *cmdHelpBuilder) addCmdWithComment(label, cmd, comment string, args ...string) *cmdHelpBuilder {
	r.items = append(r.items, cmdHelpItem{
		label:   label,
		cmd:     cmd,
		comment: comment,
		args:    args,
	})
	return r
}

func (r *cmdHelpBuilder) build() string {
	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("<b>%s</b>\n", r.label))
	for i, item := range r.items {
		sb.WriteString(fmt.Sprintf("<b>\u2022 %s</b>\n", item.label))
		sb.WriteString(fmt.Sprintf("%s,%s", r.baseCmd, item.cmd))

		if len(item.args) > 0 {
			sb.WriteString(",\n")
		} else {
			sb.WriteString("\n")
		}

		for j, arg := range item.args {
			sArg := arg
			if strings.Contains(sArg, "|") {
				parts := strings.Split(sArg, "|")
				sArg = fmt.Sprintf("%s\n ИЛИ\n %s", parts[0], parts[1])
			}

			if j == len(item.args)-1 {
				sb.WriteString(fmt.Sprintf(" %s\n", sArg))
			} else {
				sb.WriteString(fmt.Sprintf(" %s,\n", sArg))
			}
		}

		if item.comment != "" {
			sb.WriteString(fmt.Sprintf("\n<i>Примечание</i>: %s\n", item.comment))
		}

		if i != len(r.items)-1 {
			sb.WriteString("\n")
		}
	}

	return sb.String()
}
